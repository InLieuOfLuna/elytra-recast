plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

version = project.mod_version
group = project.group

repositories {
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://maven.quiltmc.org/repository/release/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.mappings_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    implementation "com.google.code.findbugs:jsr305:3+"

    modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version_out}:${project.malilib_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    //modCompile "net.fabricmc.fabric-api:fabric-api:" + config.fabric_version

    modCompileOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"
}


minecraft {
    ext.mod_version = project.mod_version

    if (mod_version.endsWith('-dev')) {
        mod_version = mod_version + "." + new Date().format('yyyyMMdd.HHmmss')
    }
}

group = project.group + "." + project.mod_id
archivesBaseName = project.mod_file_name + '-' + project.minecraft_version_out
version = project.minecraft.mod_version

processResources {
    // Exclude the GIMP image files
    exclude '**/*.xcf'
    exclude '**/xcf'

    inputs.property "mod_version", project.minecraft.mod_version

    filesMatching("fabric.mod.json") {
        expand "mod_version": project.minecraft.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

//def targetJavaVersion = 16
//tasks.withType(JavaCompile).configureEach {
//    it.options.encoding = "UTF-8"
//    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
//        it.options.release = targetJavaVersion
//    }
//}
//
//java {
//    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
//    if (JavaVersion.current() < javaVersion) {
//        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
//    }
//    archivesBaseName = project.archives_base_name
//    withSourcesJar()
//}
//
//jar {
//    from("LICENSE") {
//        rename { "${it}_${project.archivesBaseName}" }
//    }
//}